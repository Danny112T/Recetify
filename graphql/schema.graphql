"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")
"A date string with format 'y-m-d'. e.g. '2002-12-22.'"
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")
"A upload string"
scalar Upload @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

    "Find a single Recipe by an identifying attribute."
    recipe(
        "search by primary key."
        id: ID @eq @rules(apply: ["prohibits:title", "required_without:title"])
    ): Recipe @find #@whereAuth(relation: "user")

    recipes(
        "FIlters by title. Accepts SQL like wildcards '%' and '_'."
        title: String @where(operator: "like")
        origen_food: origen @where(operator: "like")
        time_food: time @where(operator: "like")
        diet: String @where(operator: "like")
        prep_time: Float @where(operator: "=")
        calories: Float @where(operator: "=")
        rate: Float @where(operator: "=")
    ): [Recipe!]! @paginate(defaultCount: 10) #@whereAuth(relation: "user")

    step(
        "search by primary key"
        id: ID @eq @rules(apply: ["prohibits:description", "required_without:description"])
    ): Step @find

    steps(
        "filters by recipe. Accepts SQL LIKE wildcards '%' and '_'."
        description: String
    ): [Step!]! @paginate(defaultCount: 10)

    Comment(
        "search by primary key"
        id: ID @eq @rules(apply: ["prohibits:comentario", "required_without:comentario"])
    ): Comment @find

    Comments(
        "filters by recipe. Accepts SQL LIKE wildcards '%' and '_'."
        comentario: String
    ): [Comment!]! @paginate(defaultCount: 10)

    "Regresa el Usuario Actual Loggeado"
    me: User! @guard @auth
}

type Mutation {
    "Crea un Usuario Nuevo"
    createUser(input: createUserInput! @spread): User!

    "Actualiza un Usuario Ya Existente"
    updateUser(id: ID!, email: String, password: String): User! @update

    "Elimina un Usuario"
    deleteUser(id: ID @whereKey): User! @delete

    "Mutación para Iniciar Sesión en la App Web"
    login(input: loginInput! @spread): Session!

    "Mutación para Cerrar Sesión"
    logout: Session!

    "Mutación para crear receta"
    createRecipe(input: createRecipeInput! @spread): Recipe! @create @can(ability: "create", injectArgs: true)

    "Actualiza una Receta Ya Existente"
    updateRecipe(
        id: ID!,
        title: String
        description: String
        origen_food: String
        time_food: String
        diet: String
        prep_time: Float,
        calories: Float,
        fat: Float,
        carbs: Float,
        proteins: Float
    ): Recipe! @update @can(ability: "update", find: "id")

    "Elimina una Receta"
    deleteRecipe(id: ID! @whereKey): Recipe! @delete @can(ability: "delete", find:"id")

    "Crear un paso de la receta"
    createStep(input: createStepInput! @spread): Step! @create @can(ability: "create")

    "actualizar un paso ya existente"
    updateStep(id: ID!, description: String): Step! @update @can(ability: "update", find: "id")

    "eliminar un paso"
    deleteStep(id: ID! @whereKey): Step! @delete @can(ability: "delete", find: "id")

    "crear un comentario en una receta"
    createComment(input: createCommentInput! @spread): Comment! @create @can(ability: "create", injectArgs: true)

    "actualizar un comentario ya existente"
    updateComment(id: ID!, comentario: String, rating: Float): Comment! @update @can(ability: "update", find: "id")

    "eliminar un comentario"
    deleteComment(id: ID! @whereKey): Comment! @delete @can(ability: "delete", find: "id")
}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "el apellido"
    lastname: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!

    "La fecha de cumpleaños"
    birthday: Date!

    "Tiene muchas tareas"
    recipes:[Recipe!]! @hasMany
}

"Receta"
type Recipe {
    "Id"
    id: ID!
    "Titulo de la receta"
    title: String!
    "Descripcion de la receta"
    description: String
    "Imagen principal de la receta"
    image_pf_path: String
    "De donde es la Receta. Ej, Mexicana"
    origen_food: origen!
    "En que tiempo es la receta. Ej, Desayuno"
    time_food: time!
    "Tipo de dieta de la receta. Ej, Omnivoro"
    diet: diet!
    "Tiempo de preparación de la receta en Float."
    prep_time: Float!,
    "Cantidad de calorias que contiene la receta"
    calories: Float,
    "Cantidad de grasas que contiene la receta"
    fat: Float,
    "Cantidad de carbohidratos que contiene la receta"
    carbs: Float,
    "Cantidad de proteinas que contiene la receta"
    proteins: Float,
    "Calificación promedio de la receta"
    rate: Float
    "El usuario que creo la receta"
    user: User @belongsTo
    "Los pasos"
    steps: [Step!]! @hasMany
    "Comentarios de la receta"
    Comments: [Comment!]! @hasMany
}

"Sesión"
type Session {
    "Usuario obligatorio"
    user: User!
    "El token de acceso a la App Web"
    accessToken: String
}

"Comentarios"
type Comment {
    "Id"
    id: ID!
    "Comentario"
    comentario: String!
    "Calificacion"
    rating: Float,
    "receta"
    Recipe: Recipe! @belongsTo
}

type Step {
    "descripcion"
    description: String!
    "Direccion de Imagen"
    imagen_path: String
    Recipe: Recipe! @belongsTo
}

input createUserInput @validator {
    "Nombre del usuario"
    name: String!
    "Apellido(s) del usuario"
    lastname: String!
    "Un correo electronico valido y unico"
    email: String!
    "Una contraseña con minimo de 6 caracteres, una mayuscula, una minuscula y un caracter especial"
    password: String!
    "Una fecha de cumpleaños de formato 'Año-Mes-Dia', Ej. '2002-02-11'. "
    birthday: Date!
}

input CreateUserBelongsTo {
    connect: ID
    create: createUserInput
}

input CreateRecipeBelongsTo {
    connect: ID
    create: createRecipeInput
}

input loginInput {
    "Un correo electronico valido"
    email: String!
    "La contraseña"
    password: String!
}

input createRecipeInput @validator {
    "Titulo de la receta"
    title: String!
    "descripcion de la receta"
    description: String
    "Imagen Principal de la receta"
    image_pf_path: Upload
    "Origen de comida. Ej, Mexicana"
    origen_food: String!
    "Tiempo de comida. Ej, Desayuno"
    time_food: String!
    "Tipo de dieta. Ej. Vegano"
    diet: String!
    "Tiempo de preparacion para la receta"
    prep_time: Float,
    "Cantidad de calorias en la receta"
    calories: Float,
    "Cantidad de grasas en la receta"
    fat: Float,
    "Cantidad de carbohidratos en la receta"
    carbs: Float,
    "cantidad de proteinas en la receta"
    proteins: Float
    "El usuario que creo la receta"
    user: CreateUserBelongsTo
}

input createRecipeHasMany {
    create:[createRecipeInput!]!
}

input createStepHasMany {
    create:[createStepInput!]!
}

input createStepInput {
    description: String! @rules(apply: ["string", "max:250"])
    recipe: CreateRecipeBelongsTo
}

input createCommentInput {
    comentario: String! @rules(apply: ["string","max:1000"])
    rating: Float,
    recipe: CreateRecipeBelongsTo
}

"Tipos de comida, dependiendo de su origen"
enum origen
{
    "Comida Mexiana."
    Mexicana @enum(value: "Mexicana")
    "Comida Americana."
    Americana @enum(vaule: "Americana")
    "Comida Italiana."
    Italiana @enum(value: "Italiana")
    "Comida China."
    China @enum(valie: "China")
}

"Los tiempos de la comida. Ej, Desayuno."
enum time
{
    "Tiempo Desayuno"
    Desayuno @enum(value: "Desayuno")
    "Tiempo Comida"
    Comida @enum(value: "Comida")
    "Tiempo Cena"
    Cena @enum(value: "Cena")
    "Tiempo Colación"
    Colacion @enum(value: "Colacion")
}

enum diet
{
    "Dieta Omnivora"
    Omnivoro @enum(value: "Omnivoro")
    "Dieta Ovo-Lactea Vegetariana"
    OLV @enum(value: "OLV")
    "Dieta vegetariana"
    Vegetariano @enum(value: "Vegetariano")
    "Dieta Crudivegana"
    Crudivegetariana @enum(value: "Crudivegetariana")
}
